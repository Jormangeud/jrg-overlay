From 1c0af82877c9d08f0a6bda39277472182cc7f9c5 Mon Sep 17 00:00:00 2001
From: Antoine Catton <devel@antoine.catton.fr>
Date: Thu, 22 Jan 2015 22:09:03 -0700
Subject: [PATCH 1/7] Cleaner way to build a unittest suite using metaclasses

---
 src/slimit/tests/test_ecmavisitor.py | 29 +++++++++++++++--------------
 1 file changed, 15 insertions(+), 14 deletions(-)

diff --git a/src/slimit/tests/test_ecmavisitor.py b/src/slimit/tests/test_ecmavisitor.py
index 65dfce2..5e4df8d 100644
--- a/src/slimit/tests/test_ecmavisitor.py
+++ b/src/slimit/tests/test_ecmavisitor.py
@@ -29,31 +29,32 @@
 
 from slimit.parser import Parser
 
+UnitTestMeta = type(unittest.TestCase)
 
-def decorator(cls):
-    def make_test_function(input, expected):
 
-        def test_func(self):
-            parser = Parser()
-            result = parser.parse(input).to_ecma()
-            self.assertMultiLineEqual(result, expected)
+class VisitorTestMeta(UnitTestMeta):
+    def __new__(cls, name, bases, attributes):
+        test_cases = attributes.pop('TEST_CASES')
 
-        return test_func
+        for idx, input_ in enumerate(test_cases):
+            name = 'test_case_{}'.format(idx)
+            attributes[name] = lambda self: self.case(input_)
 
-    for index, input in enumerate(cls.TEST_CASES):
-        input = textwrap.dedent(input).strip()
-        func = make_test_function(input, input)
-        setattr(cls, 'test_case_%d' % index, func)
+        return super(VisitorTestMeta, cls).__new__(cls, name, bases, attributes)
 
-    return cls
 
-
-@decorator
 class ECMAVisitorTestCase(unittest.TestCase):
+    __metaclass__ = VisitorTestMeta
 
     def setUp(self):
         self.maxDiff = 2000
 
+    def case(self, input_):
+        parser = Parser()
+        result = parser.parse(input_).to_ecma()
+        expected = textwrap.dedent(input_).strip()
+        self.assertMultiLineEqual(result, expected)
+
     TEST_CASES = [
         ################################
         # block

From 6940e53a77a5215f91ec1509e49a158b132ac031 Mon Sep 17 00:00:00 2001
From: Antoine Catton <devel@antoine.catton.fr>
Date: Thu, 22 Jan 2015 22:18:21 -0700
Subject: [PATCH 2/7] Make visitor testing generic (in order to test many
 visitors)

---
 src/slimit/tests/test_ecmavisitor.py | 37 ++++++++++++++++++++----------------
 1 file changed, 21 insertions(+), 16 deletions(-)

diff --git a/src/slimit/tests/test_ecmavisitor.py b/src/slimit/tests/test_ecmavisitor.py
index 5e4df8d..f7e2adb 100644
--- a/src/slimit/tests/test_ecmavisitor.py
+++ b/src/slimit/tests/test_ecmavisitor.py
@@ -34,27 +34,21 @@
 
 class VisitorTestMeta(UnitTestMeta):
     def __new__(cls, name, bases, attributes):
-        test_cases = attributes.pop('TEST_CASES')
-
-        for idx, input_ in enumerate(test_cases):
+        try:
+            test_cases = attributes['TEST_CASES']
+        except KeyError:
+            test_cases = [getattr(b, 'TEST_CASES')
+                          for b in bases
+                          if hasattr(b, 'TEST_CASES')][0]
+
+        for idx, case in enumerate(test_cases):
             name = 'test_case_{}'.format(idx)
-            attributes[name] = lambda self: self.case(input_)
+            attributes[name] = lambda self: self.case(case)
 
         return super(VisitorTestMeta, cls).__new__(cls, name, bases, attributes)
 
 
-class ECMAVisitorTestCase(unittest.TestCase):
-    __metaclass__ = VisitorTestMeta
-
-    def setUp(self):
-        self.maxDiff = 2000
-
-    def case(self, input_):
-        parser = Parser()
-        result = parser.parse(input_).to_ecma()
-        expected = textwrap.dedent(input_).strip()
-        self.assertMultiLineEqual(result, expected)
-
+class VisitorTestMixin(object):
     TEST_CASES = [
         ################################
         # block
@@ -504,3 +498,14 @@ def case(self, input_):
         ]
 
 
+class ECMAVisitorTestCase(VisitorTestMixin, unittest.TestCase):
+    __metaclass__ = VisitorTestMeta
+
+    def setUp(self):
+        self.maxDiff = 2000
+
+    def case(self, case):
+        parser = Parser()
+        result = parser.parse(case).to_ecma()
+        expected = textwrap.dedent(case).strip()
+        self.assertMultiLineEqual(result, expected)

From dce498afdde3257f4f2bd911b1c67ae5d79ee637 Mon Sep 17 00:00:00 2001
From: Antoine Catton <devel@antoine.catton.fr>
Date: Thu, 22 Jan 2015 22:24:53 -0700
Subject: [PATCH 3/7] Group visitor testing in one file

---
 src/slimit/tests/test_ecmavisitor.py | 511 -------------------
 src/slimit/tests/test_minifier.py    | 470 -----------------
 src/slimit/tests/test_visitor.py     | 942 +++++++++++++++++++++++++++++++++++
 3 files changed, 942 insertions(+), 981 deletions(-)
 delete mode 100644 src/slimit/tests/test_ecmavisitor.py
 delete mode 100644 src/slimit/tests/test_minifier.py
 create mode 100644 src/slimit/tests/test_visitor.py

diff --git a/src/slimit/tests/test_ecmavisitor.py b/src/slimit/tests/test_ecmavisitor.py
deleted file mode 100644
index f7e2adb..0000000
--- a/src/slimit/tests/test_ecmavisitor.py
+++ /dev/null
@@ -1,511 +0,0 @@
-###############################################################################
-#
-# Copyright (c) 2011 Ruslan Spivak
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy
-# of this software and associated documentation files (the "Software"), to deal
-# in the Software without restriction, including without limitation the rights
-# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-# copies of the Software, and to permit persons to whom the Software is
-# furnished to do so, subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in
-# all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-# THE SOFTWARE.
-#
-###############################################################################
-
-__author__ = 'Ruslan Spivak <ruslan.spivak@gmail.com>'
-
-import textwrap
-import unittest
-
-from slimit.parser import Parser
-
-UnitTestMeta = type(unittest.TestCase)
-
-
-class VisitorTestMeta(UnitTestMeta):
-    def __new__(cls, name, bases, attributes):
-        try:
-            test_cases = attributes['TEST_CASES']
-        except KeyError:
-            test_cases = [getattr(b, 'TEST_CASES')
-                          for b in bases
-                          if hasattr(b, 'TEST_CASES')][0]
-
-        for idx, case in enumerate(test_cases):
-            name = 'test_case_{}'.format(idx)
-            attributes[name] = lambda self: self.case(case)
-
-        return super(VisitorTestMeta, cls).__new__(cls, name, bases, attributes)
-
-
-class VisitorTestMixin(object):
-    TEST_CASES = [
-        ################################
-        # block
-        ################################
-        """
-        {
-          var a = 5;
-        }
-        """,
-
-        ################################
-        # variable statement
-        ################################
-        """
-        var a;
-        var b;
-        var a, b = 3;
-        var a = 1, b;
-        var a = 5, b = 7;
-        """,
-
-        # empty statement
-        """
-        ;
-        ;
-        ;
-        """,
-
-        # test 3
-        ################################
-        # if
-        ################################
-        'if (true) var x = 100;',
-
-        """
-        if (true) {
-          var x = 100;
-          var y = 200;
-        }
-        """,
-
-        'if (true) if (true) var x = 100; else var y = 200;',
-
-        # test 6
-        """
-        if (true) {
-          var x = 100;
-        } else {
-          var y = 200;
-        }
-        """,
-        ################################
-        # iteration
-        ################################
-        """
-        for (i = 0; i < 10; i++) {
-          x = 10 * i;
-        }
-        """,
-
-        """
-        for (var i = 0; i < 10; i++) {
-          x = 10 * i;
-        }
-        """,
-
-        # test 9
-        """
-        for (i = 0, j = 10; i < j && j < 15; i++, j++) {
-          x = i * j;
-        }
-        """,
-
-        """
-        for (var i = 0, j = 10; i < j && j < 15; i++, j++) {
-          x = i * j;
-        }
-        """,
-
-        """
-        for (p in obj) {
-
-        }
-        """,
-        # retain the semicolon in the initialiser part of a 'for' statement
-        """
-        for (Q || (Q = []); d < b; ) {
-          d = 1;
-        }
-        """,
-
-        """
-        for (new Foo(); d < b; ) {
-          d = 1;
-        }
-        """,
-
-        """
-        for (2 >> (foo ? 32 : 43) && 54; 21; ) {
-          a = c;
-        }
-        """,
-
-        """
-        for (/^.+/g; cond(); ++z) {
-          ev();
-        }
-        """,
-
-        # test 12
-        """
-        for (var p in obj) {
-          p = 1;
-        }
-        """,
-
-        """
-        do {
-          x += 1;
-        } while (true);
-        """,
-
-        """
-        while (false) {
-          x = null;
-        }
-        """,
-
-        # test 15
-        ################################
-        # continue statement
-        ################################
-        """
-        while (true) {
-          continue;
-          s = 'I am not reachable';
-        }
-        """,
-
-        """
-        while (true) {
-          continue label1;
-          s = 'I am not reachable';
-        }
-        """,
-
-        ################################
-        # break statement
-        ################################
-        """
-        while (true) {
-          break;
-          s = 'I am not reachable';
-        }
-        """,
-        # test 18
-        """
-        while (true) {
-          break label1;
-          s = 'I am not reachable';
-        }
-        """,
-
-        ################################
-        # return statement
-        ################################
-        """
-        {
-          return;
-        }
-        """,
-
-        """
-        {
-          return 1;
-        }
-        """,
-
-        # test21
-        ################################
-        # with statement
-        ################################
-        """
-        with (x) {
-          var y = x * 2;
-        }
-        """,
-
-        ################################
-        # labelled statement
-        ################################
-        """
-        label: while (true) {
-          x *= 3;
-        }
-        """,
-
-        ################################
-        # switch statement
-        ################################
-        """
-        switch (day_of_week) {
-          case 6:
-          case 7:
-            x = 'Weekend';
-            break;
-          case 1:
-            x = 'Monday';
-            break;
-          default:
-            break;
-        }
-        """,
-
-        # test 24
-        ################################
-        # throw statement
-        ################################
-        """
-        throw 'exc';
-        """,
-
-        ################################
-        # debugger statement
-        ################################
-        'debugger;',
-
-        ################################
-        # expression statement
-        ################################
-        """
-        5 + 7 - 20 * 10;
-        ++x;
-        --x;
-        x++;
-        x--;
-        x = 17 /= 3;
-        s = mot ? z : /x:3;x<5;y</g / i;
-        """,
-
-        # test 27
-        ################################
-        # try statement
-        ################################
-        """
-        try {
-          x = 3;
-        } catch (exc) {
-          x = exc;
-        }
-        """,
-
-        """
-        try {
-          x = 3;
-        } finally {
-          x = null;
-        }
-        """,
-
-        """
-        try {
-          x = 5;
-        } catch (exc) {
-          x = exc;
-        } finally {
-          y = null;
-        }
-        """,
-
-        # test 30
-        ################################
-        # function
-        ################################
-        """
-        function foo(x, y) {
-          z = 10;
-          return x + y + z;
-        }
-        """,
-
-        """
-        function foo() {
-          return 10;
-        }
-        """,
-
-        """
-        var a = function() {
-          return 10;
-        };
-        """,
-        # test 33
-        """
-        var a = function foo(x, y) {
-          return x + y;
-        };
-        """,
-        # nested function declaration
-        """
-        function foo() {
-          function bar() {
-
-          }
-        }
-        """,
-
-        """
-        var mult = function(x) {
-          return x * 10;
-        }();
-        """,
-
-        # function call
-        # test 36
-        'foo();',
-        'foo(x, 7);',
-        'foo()[10];',
-        # test 39
-        'foo().foo;',
-
-        ################################
-        # misc
-        ################################
-
-        # new
-        'var foo = new Foo();',
-        # dot accessor
-        'var bar = new Foo.Bar();',
-
-        # test 42
-        # bracket accessor
-        'var bar = new Foo.Bar()[7];',
-
-        # object literal
-        """
-        var obj = {
-          foo: 10,
-          bar: 20
-        };
-        """,
-        """
-        var obj = {
-          1: 'a',
-          2: 'b'
-        };
-        """,
-        # test 45
-        """
-        var obj = {
-          'a': 100,
-          'b': 200
-        };
-        """,
-        """
-        var obj = {
-        };
-        """,
-
-        # array
-        """
-        var a = [1,2,3,4,5];
-        var res = a[3];
-        """,
-        # test 48
-        # elision
-        'var a = [,,,];',
-        'var a = [1,,,4];',
-        'var a = [1,,3,,5];',
-
-        # test 51
-        """
-        String.prototype.foo = function(data) {
-          var tmpl = this.toString();
-          return tmpl.replace(/{{\s*(.*?)\s*}}/g, function(a, b) {
-            var node = data;
-            if (true) {
-              var value = true;
-            } else {
-              var value = false;
-            }
-            $.each(n.split('.'), function(i, sym) {
-              node = node[sym];
-            });
-            return node;
-          });
-        };
-        """,
-
-        #######################################
-        # Make sure parentheses are not removed
-        #######################################
-
-        # ... Expected an identifier and instead saw '/'
-        'Expr.match[type].source + (/(?![^\[]*\])(?![^\(]*\))/.source);',
-
-        '(options = arguments[i]) != null;',
-
-        # test 54
-        'return (/h\d/i).test(elem.nodeName);',
-
-        # https://github.com/rspivak/slimit/issues/42
-        """
-        e.b(d) ? (a = [c.f(j[1])], e.fn.attr.call(a, d, !0)) : a = [k.f(j[1])];
-        """,
-
-        """
-        (function() {
-          x = 5;
-        }());
-        """,
-
-        """
-        (function() {
-          x = 5;
-        })();
-        """,
-
-        'return !(match === true || elem.getAttribute("classid") !== match);',
-
-        # test 57
-        'var el = (elem ? elem.ownerDocument || elem : 0).documentElement;',
-
-        # typeof
-        'typeof second.length === "number";',
-
-        # function call in FOR init
-        """
-        for (o(); i < 3; i++) {
-
-        }
-        """,
-
-        # https://github.com/rspivak/slimit/issues/32
-        """
-        Name.prototype = {
-          get fullName() {
-            return this.first + " " + this.last;
-          },
-          set fullName(name) {
-            var names = name.split(" ");
-            this.first = names[0];
-            this.last = names[1];
-          }
-        };
-        """,
-        ]
-
-
-class ECMAVisitorTestCase(VisitorTestMixin, unittest.TestCase):
-    __metaclass__ = VisitorTestMeta
-
-    def setUp(self):
-        self.maxDiff = 2000
-
-    def case(self, case):
-        parser = Parser()
-        result = parser.parse(case).to_ecma()
-        expected = textwrap.dedent(case).strip()
-        self.assertMultiLineEqual(result, expected)
diff --git a/src/slimit/tests/test_minifier.py b/src/slimit/tests/test_minifier.py
deleted file mode 100644
index e999335..0000000
--- a/src/slimit/tests/test_minifier.py
+++ /dev/null
@@ -1,470 +0,0 @@
-###############################################################################
-#
-# Copyright (c) 2011 Ruslan Spivak
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy
-# of this software and associated documentation files (the "Software"), to deal
-# in the Software without restriction, including without limitation the rights
-# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-# copies of the Software, and to permit persons to whom the Software is
-# furnished to do so, subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in
-# all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-# THE SOFTWARE.
-#
-###############################################################################
-
-__author__ = 'Ruslan Spivak <ruslan.spivak@gmail.com>'
-
-import unittest
-
-from slimit import minify
-
-
-def decorator(cls):
-    def make_test_function(input, expected):
-
-        def test_func(self):
-            self.assertMinified(input, expected)
-
-        return test_func
-
-    for index, (input, expected) in enumerate(cls.TEST_CASES):
-        func = make_test_function(input, expected)
-        setattr(cls, 'test_case_%d' % index, func)
-
-    return cls
-
-
-@decorator
-class MinifierTestCase(unittest.TestCase):
-
-    def assertMinified(self, source, expected):
-        minified = minify(source)
-        self.maxDiff = None
-        self.assertSequenceEqual(minified, expected)
-
-    TEST_CASES = [
-        ("""
-        jQuery.fn = jQuery.prototype = {
-                // For internal use only.
-                _data: function( elem, name, data ) {
-                        return jQuery.data( elem, name, data, true );
-                }
-        };
-        """,
-         'jQuery.fn=jQuery.prototype={_data:function(elem,name,data){return jQuery.data(elem,name,data,true);}};'),
-
-        ('context = context instanceof jQuery ? context[0] : context;',
-         'context=context instanceof jQuery?context[0]:context;'
-         ),
-
-        ("""
-        /*
-        * A number of helper functions used for managing events.
-        * Many of the ideas behind this code originated from
-        * Dean Edwards' addEvent library.
-        */
-        if ( elem && elem.parentNode ) {
-                // Handle the case where IE and Opera return items
-                // by name instead of ID
-                if ( elem.id !== match[2] ) {
-                        return rootjQuery.find( selector );
-                }
-
-                // Otherwise, we inject the element directly into the jQuery object
-                this.length = 1;
-                this[0] = elem;
-        }
-        """,
-
-         'if(elem&&elem.parentNode){if(elem.id!==match[2])return rootjQuery.find(selector);this.length=1;this[0]=elem;}'
-         ),
-
-        ("""
-        var a = function( obj ) {
-                for ( var name in obj ) {
-                        return false;
-                }
-                return true;
-        };
-        """,
-         'var a=function(obj){for(var name in obj)return false;return true;};'
-         ),
-
-        ("""
-        x = "string", y = 5;
-
-        (x = 5) ? true : false;
-
-        for (p in obj)
-        ;
-
-        if (true)
-          val = null;
-        else
-          val = false;
-
-        """,
-         'x="string",y=5;(x=5)?true:false;for(p in obj);if(true)val=null;else val=false;'
-         ),
-
-        # for loops + empty statement in loop body
-        ("""
-        for (x = 0; true; x++)
-        ;
-        for (; true; x++)
-        ;
-        for (x = 0, y = 5; true; x++)
-        ;
-
-        y = (x + 5) * 20;
-
-        """,
-         'for(x=0;true;x++);for(;true;x++);for(x=0,y=5;true;x++);y=(x+5)*20;'),
-
-
-        # unary expressions
-        ("""
-        delete x;
-        typeof x;
-        void x;
-        x += (!y)++;
-        """,
-         'delete x;typeof x;void x;x+=(!y)++;'),
-
-        # label + break label + continue label
-        ("""
-        label:
-        if ( i == 0 )
-          continue label;
-        switch (day) {
-        case 5:
-          break ;
-        default:
-          break label;
-        }
-        """,
-         'label:if(i==0)continue label;switch(day){case 5:break;default:break label;}'),
-
-        # break + continue: no labels
-        ("""
-        while (i <= 7) {
-          if ( i == 3 )
-              continue;
-          if ( i == 0 )
-              break;
-        }
-        """,
-         'while(i<=7){if(i==3)continue;if(i==0)break;}'),
-
-        # regex + one line statements in if and if .. else
-        ("""
-        function a(x, y) {
-         var re = /ab+c/;
-         if (x == 1)
-           return x + y;
-         if (x == 3)
-           return {x: 1};
-         else
-           return;
-        }
-        """,
-         'function a(x,y){var re=/ab+c/;if(x==1)return x+y;if(x==3)return{x:1};else return;}'),
-
-        # new
-        ('return new jQuery.fn.init( selector, context, rootjQuery );',
-         'return new jQuery.fn.init(selector,context,rootjQuery);'
-         ),
-
-        # no space after 'else' when the next token is (, {
-        ("""
-        if (true) {
-          x = true;
-          y = 3;
-        } else {
-          x = false
-          y = 5
-        }
-        """,
-         'if(true){x=true;y=3;}else{x=false;y=5;}'),
-
-        ("""
-        if (true) {
-          x = true;
-          y = 3;
-        } else
-          (x + ' qw').split(' ');
-        """,
-         "if(true){x=true;y=3;}else(x+' qw').split(' ');"),
-
-
-        ##############################################################
-        # Block braces removal
-        ##############################################################
-
-        # do while
-        ('do { x += 1; } while(true);', 'do x+=1;while(true);'),
-        # do while: multiple statements
-        ('do { x += 1; y += 1;} while(true);', 'do{x+=1;y+=1;}while(true);'),
-
-        # elision
-        ('var a = [1, 2, 3, ,,,5];', 'var a=[1,2,3,,,,5];'),
-
-        # with
-        ("""
-        with (obj) {
-          a = b;
-        }
-        """,
-         'with(obj)a=b;'),
-
-        # with: multiple statements
-        ("""
-        with (obj) {
-          a = b;
-          c = d;
-        }
-        """,
-         'with(obj){a=b;c=d;}'),
-
-        # if else
-        ("""
-        if (true) {
-          x = true;
-        } else {
-          x = false
-        }
-        """,
-         'if(true)x=true;else x=false;'),
-
-        # if: multiple statements
-        ("""
-        if (true) {
-          x = true;
-          y = false;
-        } else {
-          x = false;
-          y = true;
-        }
-        """,
-         'if(true){x=true;y=false;}else{x=false;y=true;}'),
-
-        # try catch finally: one statement
-        ("""
-        try {
-          throw "my_exception"; // generates an exception
-        }
-        catch (e) {
-          // statements to handle any exceptions
-          log(e); // pass exception object to error handler
-        }
-        finally {
-          closefiles(); // always close the resource
-        }
-        """,
-         'try{throw "my_exception";}catch(e){log(e);}finally{closefiles();}'
-         ),
-
-        # try catch finally: no statements
-        ("""
-        try {
-        }
-        catch (e) {
-        }
-        finally {
-        }
-        """,
-         'try{}catch(e){}finally{}'
-         ),
-
-        # try catch finally: multiple statements
-        ("""
-        try {
-          x = 3;
-          y = 5;
-        }
-        catch (e) {
-          log(e);
-          log('e');
-        }
-        finally {
-          z = 7;
-          log('z');
-        }
-        """,
-         "try{x=3;y=5;}catch(e){log(e);log('e');}finally{z=7;log('z');}"
-         ),
-
-        # tricky case with an 'if' nested in 'if .. else'
-        # We need to preserve braces in the first 'if' otherwise
-        # 'else' might get associated with nested 'if' instead
-        ("""
-        if ( obj ) {
-                for ( n in obj ) {
-                        if ( v === false) {
-                                break;
-                        }
-                }
-        } else {
-                for ( ; i < l; ) {
-                        if ( nv === false ) {
-                                break;
-                        }
-                }
-        }
-        """,
-         'if(obj){for(n in obj)if(v===false)break;}else for(;i<l;)if(nv===false)break;'),
-
-        # We don't care about nested 'if' when enclosing 'if' block
-        # contains multiple statements because braces won't be removed
-        # by visit_Block when there are multiple statements in the block
-        ("""
-        if ( obj ) {
-                for ( n in obj ) {
-                        if ( v === false) {
-                                break;
-                        }
-                }
-                x = 5;
-        } else {
-                for ( ; i < l; ) {
-                        if ( nv === false ) {
-                                break;
-                        }
-                }
-        }
-        """,
-         'if(obj){for(n in obj)if(v===false)break;x=5;}else for(;i<l;)if(nv===false)break;'),
-
-
-        # No dangling 'else' - remove braces
-        ("""
-        if ( obj ) {
-                for ( n in obj ) {
-                        if ( v === false) {
-                                break;
-                        } else {
-                                n = 3;
-                        }
-                }
-        } else {
-                for ( ; i < l; ) {
-                        if ( nv === false ) {
-                                break;
-                        }
-                }
-        }
-        """,
-         'if(obj)for(n in obj)if(v===false)break;else n=3;else for(;i<l;)if(nv===false)break;'),
-
-        # foo["bar"] --> foo.bar
-        ('foo["bar"];', 'foo.bar;'),
-        ("foo['bar'];", 'foo.bar;'),
-        ("""foo['bar"']=42;""", """foo['bar"']=42;"""),
-        ("""foo["bar'"]=42;""", """foo["bar'"]=42;"""),
-        ('foo["bar bar"];', 'foo["bar bar"];'),
-        ('foo["bar"+"bar"];', 'foo["bar"+"bar"];'),
-        # https://github.com/rspivak/slimit/issues/34
-        # test some reserved keywords
-        ('foo["for"];', 'foo["for"];'),
-        ('foo["class"];', 'foo["class"];'),
-
-
-        # https://github.com/rspivak/slimit/issues/21
-        # c||(c=393,a=323,b=2321); --> c||c=393,a=323,b=2321; ERROR
-        ('c||(c=393);', 'c||(c=393);'),
-        ('c||(c=393,a=323,b=2321);', 'c||(c=393,a=323,b=2321);'),
-
-        # https://github.com/rspivak/slimit/issues/25
-        ('for(a?b:c;d;)e=1;', 'for(a?b:c;d;)e=1;'),
-
-        # https://github.com/rspivak/slimit/issues/26
-        ('"begin"+ ++a+"end";', '"begin"+ ++a+"end";'),
-
-        # https://github.com/rspivak/slimit/issues/28
-        ("""
-         (function($) {
-             $.hello = 'world';
-         }(jQuery));
-         """,
-         "(function($){$.hello='world';}(jQuery));"),
-
-        # function call in FOR init
-        ('for(o(); i < 3; i++) {}', 'for(o();i<3;i++){}'),
-
-        # unary increment operator in FOR init
-        ('for(i++; i < 3; i++) {}', 'for(i++;i<3;i++){}'),
-
-        # unary decrement operator in FOR init
-        ('for(i--; i < 3; i++) {}', 'for(i--;i<3;i++){}'),
-
-        # issue-37, simple identifier in FOR init
-        ('for(i; i < 3; i++) {}', 'for(i;i<3;i++){}'),
-
-        # https://github.com/rspivak/slimit/issues/32
-        ("""
-         Name.prototype = {
-           getPageProp: function Page_getPageProp(key) {
-             return this.pageDict.get(key);
-           },
-
-           get fullName() {
-             return this.first + " " + this.last;
-           },
-
-           set fullName(name) {
-             var names = name.split(" ");
-             this.first = names[0];
-             this.last = names[1];
-           }
-         };
-         """,
-         ('Name.prototype={getPageProp:function Page_getPageProp(key){'
-          'return this.pageDict.get(key);},'
-          'get fullName(){return this.first+" "+this.last;},'
-          'set fullName(name){var names=name.split(" ");this.first=names[0];'
-          'this.last=names[1];}};')
-        ),
-
-        # https://github.com/rspivak/slimit/issues/47 - might be a Python 3
-        # related issue
-        ('testObj[":"] = undefined; // Breaks', 'testObj[":"]=undefined;'),
-        ('testObj["::"] = undefined; // Breaks', 'testObj["::"]=undefined;'),
-        ('testObj["a:"] = undefined; // Breaks', 'testObj["a:"]=undefined;'),
-        ('testObj["."] = undefined; // OK', 'testObj["."]=undefined;'),
-        ('testObj["{"] = undefined; // OK', 'testObj["{"]=undefined;'),
-        ('testObj["}"] = undefined; // OK', 'testObj["}"]=undefined;'),
-        ('testObj["["] = undefined; // Breaks', 'testObj["["]=undefined;'),
-        ('testObj["]"] = undefined; // Breaks', 'testObj["]"]=undefined;'),
-        ('testObj["("] = undefined; // OK', 'testObj["("]=undefined;'),
-        ('testObj[")"] = undefined; // OK', 'testObj[")"]=undefined;'),
-        ('testObj["="] = undefined; // Breaks', 'testObj["="]=undefined;'),
-        ('testObj["-"] = undefined; // OK', 'testObj["-"]=undefined;'),
-        ('testObj["+"] = undefined; // OK', 'testObj["+"]=undefined;'),
-        ('testObj["*"] = undefined; // OK', 'testObj["*"]=undefined;'),
-        ('testObj["/"] = undefined; // OK', 'testObj["/"]=undefined;'),
-        (r'testObj["\\"] = undefined; // Breaks', r'testObj["\\"]=undefined;'),
-        ('testObj["%"] = undefined; // OK', 'testObj["%"]=undefined;'),
-        ('testObj["<"] = undefined; // Breaks', 'testObj["<"]=undefined;'),
-        ('testObj[">"] = undefined; // Breaks', 'testObj[">"]=undefined;'),
-        ('testObj["!"] = undefined; // OK', 'testObj["!"]=undefined;'),
-        ('testObj["?"] = undefined; // Breaks', 'testObj["?"]=undefined;'),
-        ('testObj[","] = undefined; // OK', 'testObj[","]=undefined;'),
-        ('testObj["@"] = undefined; // Breaks', 'testObj["@"]=undefined;'),
-        ('testObj["#"] = undefined; // OK', 'testObj["#"]=undefined;'),
-        ('testObj["&"] = undefined; // OK', 'testObj["&"]=undefined;'),
-        ('testObj["|"] = undefined; // OK', 'testObj["|"]=undefined;'),
-        ('testObj["~"] = undefined; // OK', 'testObj["~"]=undefined;'),
-        ('testObj["`"] = undefined; // Breaks', 'testObj["`"]=undefined;'),
-        ('testObj["."] = undefined; // OK', 'testObj["."]=undefined;'),
-        ]
-
diff --git a/src/slimit/tests/test_visitor.py b/src/slimit/tests/test_visitor.py
new file mode 100644
index 0000000..7e797ec
--- /dev/null
+++ b/src/slimit/tests/test_visitor.py
@@ -0,0 +1,942 @@
+###############################################################################
+#
+# Copyright (c) 2011 Ruslan Spivak
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+#
+###############################################################################
+
+__author__ = 'Ruslan Spivak <ruslan.spivak@gmail.com>'
+
+import textwrap
+import unittest
+
+from slimit.parser import Parser
+from slimit import minify
+
+UnitTestMeta = type(unittest.TestCase)
+
+
+class VisitorTestMeta(UnitTestMeta):
+    def __new__(cls, name, bases, attributes):
+        try:
+            test_cases = attributes['TEST_CASES']
+        except KeyError:
+            test_cases = [getattr(b, 'TEST_CASES')
+                          for b in bases
+                          if hasattr(b, 'TEST_CASES')][0]
+
+        for idx, case in enumerate(test_cases):
+            name = 'test_case_{}'.format(idx)
+            attributes[name] = lambda self: self.case(case)
+
+        return super(VisitorTestMeta, cls).__new__(cls, name, bases, attributes)
+
+
+class VisitorTestMixin(object):
+    TEST_CASES = [
+        ################################
+        # block
+        ################################
+        """
+        {
+          var a = 5;
+        }
+        """,
+
+        ################################
+        # variable statement
+        ################################
+        """
+        var a;
+        var b;
+        var a, b = 3;
+        var a = 1, b;
+        var a = 5, b = 7;
+        """,
+
+        # empty statement
+        """
+        ;
+        ;
+        ;
+        """,
+
+        # test 3
+        ################################
+        # if
+        ################################
+        'if (true) var x = 100;',
+
+        """
+        if (true) {
+          var x = 100;
+          var y = 200;
+        }
+        """,
+
+        'if (true) if (true) var x = 100; else var y = 200;',
+
+        # test 6
+        """
+        if (true) {
+          var x = 100;
+        } else {
+          var y = 200;
+        }
+        """,
+        ################################
+        # iteration
+        ################################
+        """
+        for (i = 0; i < 10; i++) {
+          x = 10 * i;
+        }
+        """,
+
+        """
+        for (var i = 0; i < 10; i++) {
+          x = 10 * i;
+        }
+        """,
+
+        # test 9
+        """
+        for (i = 0, j = 10; i < j && j < 15; i++, j++) {
+          x = i * j;
+        }
+        """,
+
+        """
+        for (var i = 0, j = 10; i < j && j < 15; i++, j++) {
+          x = i * j;
+        }
+        """,
+
+        """
+        for (p in obj) {
+
+        }
+        """,
+        # retain the semicolon in the initialiser part of a 'for' statement
+        """
+        for (Q || (Q = []); d < b; ) {
+          d = 1;
+        }
+        """,
+
+        """
+        for (new Foo(); d < b; ) {
+          d = 1;
+        }
+        """,
+
+        """
+        for (2 >> (foo ? 32 : 43) && 54; 21; ) {
+          a = c;
+        }
+        """,
+
+        """
+        for (/^.+/g; cond(); ++z) {
+          ev();
+        }
+        """,
+
+        # test 12
+        """
+        for (var p in obj) {
+          p = 1;
+        }
+        """,
+
+        """
+        do {
+          x += 1;
+        } while (true);
+        """,
+
+        """
+        while (false) {
+          x = null;
+        }
+        """,
+
+        # test 15
+        ################################
+        # continue statement
+        ################################
+        """
+        while (true) {
+          continue;
+          s = 'I am not reachable';
+        }
+        """,
+
+        """
+        while (true) {
+          continue label1;
+          s = 'I am not reachable';
+        }
+        """,
+
+        ################################
+        # break statement
+        ################################
+        """
+        while (true) {
+          break;
+          s = 'I am not reachable';
+        }
+        """,
+        # test 18
+        """
+        while (true) {
+          break label1;
+          s = 'I am not reachable';
+        }
+        """,
+
+        ################################
+        # return statement
+        ################################
+        """
+        {
+          return;
+        }
+        """,
+
+        """
+        {
+          return 1;
+        }
+        """,
+
+        # test21
+        ################################
+        # with statement
+        ################################
+        """
+        with (x) {
+          var y = x * 2;
+        }
+        """,
+
+        ################################
+        # labelled statement
+        ################################
+        """
+        label: while (true) {
+          x *= 3;
+        }
+        """,
+
+        ################################
+        # switch statement
+        ################################
+        """
+        switch (day_of_week) {
+          case 6:
+          case 7:
+            x = 'Weekend';
+            break;
+          case 1:
+            x = 'Monday';
+            break;
+          default:
+            break;
+        }
+        """,
+
+        # test 24
+        ################################
+        # throw statement
+        ################################
+        """
+        throw 'exc';
+        """,
+
+        ################################
+        # debugger statement
+        ################################
+        'debugger;',
+
+        ################################
+        # expression statement
+        ################################
+        """
+        5 + 7 - 20 * 10;
+        ++x;
+        --x;
+        x++;
+        x--;
+        x = 17 /= 3;
+        s = mot ? z : /x:3;x<5;y</g / i;
+        """,
+
+        # test 27
+        ################################
+        # try statement
+        ################################
+        """
+        try {
+          x = 3;
+        } catch (exc) {
+          x = exc;
+        }
+        """,
+
+        """
+        try {
+          x = 3;
+        } finally {
+          x = null;
+        }
+        """,
+
+        """
+        try {
+          x = 5;
+        } catch (exc) {
+          x = exc;
+        } finally {
+          y = null;
+        }
+        """,
+
+        # test 30
+        ################################
+        # function
+        ################################
+        """
+        function foo(x, y) {
+          z = 10;
+          return x + y + z;
+        }
+        """,
+
+        """
+        function foo() {
+          return 10;
+        }
+        """,
+
+        """
+        var a = function() {
+          return 10;
+        };
+        """,
+        # test 33
+        """
+        var a = function foo(x, y) {
+          return x + y;
+        };
+        """,
+        # nested function declaration
+        """
+        function foo() {
+          function bar() {
+
+          }
+        }
+        """,
+
+        """
+        var mult = function(x) {
+          return x * 10;
+        }();
+        """,
+
+        # function call
+        # test 36
+        'foo();',
+        'foo(x, 7);',
+        'foo()[10];',
+        # test 39
+        'foo().foo;',
+
+        ################################
+        # misc
+        ################################
+
+        # new
+        'var foo = new Foo();',
+        # dot accessor
+        'var bar = new Foo.Bar();',
+
+        # test 42
+        # bracket accessor
+        'var bar = new Foo.Bar()[7];',
+
+        # object literal
+        """
+        var obj = {
+          foo: 10,
+          bar: 20
+        };
+        """,
+        """
+        var obj = {
+          1: 'a',
+          2: 'b'
+        };
+        """,
+        # test 45
+        """
+        var obj = {
+          'a': 100,
+          'b': 200
+        };
+        """,
+        """
+        var obj = {
+        };
+        """,
+
+        # array
+        """
+        var a = [1,2,3,4,5];
+        var res = a[3];
+        """,
+        # test 48
+        # elision
+        'var a = [,,,];',
+        'var a = [1,,,4];',
+        'var a = [1,,3,,5];',
+
+        # test 51
+        """
+        String.prototype.foo = function(data) {
+          var tmpl = this.toString();
+          return tmpl.replace(/{{\s*(.*?)\s*}}/g, function(a, b) {
+            var node = data;
+            if (true) {
+              var value = true;
+            } else {
+              var value = false;
+            }
+            $.each(n.split('.'), function(i, sym) {
+              node = node[sym];
+            });
+            return node;
+          });
+        };
+        """,
+
+        #######################################
+        # Make sure parentheses are not removed
+        #######################################
+
+        # ... Expected an identifier and instead saw '/'
+        'Expr.match[type].source + (/(?![^\[]*\])(?![^\(]*\))/.source);',
+
+        '(options = arguments[i]) != null;',
+
+        # test 54
+        'return (/h\d/i).test(elem.nodeName);',
+
+        # https://github.com/rspivak/slimit/issues/42
+        """
+        e.b(d) ? (a = [c.f(j[1])], e.fn.attr.call(a, d, !0)) : a = [k.f(j[1])];
+        """,
+
+        """
+        (function() {
+          x = 5;
+        }());
+        """,
+
+        """
+        (function() {
+          x = 5;
+        })();
+        """,
+
+        'return !(match === true || elem.getAttribute("classid") !== match);',
+
+        # test 57
+        'var el = (elem ? elem.ownerDocument || elem : 0).documentElement;',
+
+        # typeof
+        'typeof second.length === "number";',
+
+        # function call in FOR init
+        """
+        for (o(); i < 3; i++) {
+
+        }
+        """,
+
+        # https://github.com/rspivak/slimit/issues/32
+        """
+        Name.prototype = {
+          get fullName() {
+            return this.first + " " + this.last;
+          },
+          set fullName(name) {
+            var names = name.split(" ");
+            this.first = names[0];
+            this.last = names[1];
+          }
+        };
+        """,
+        ]
+
+
+class ECMAVisitorTestCase(VisitorTestMixin, unittest.TestCase):
+    __metaclass__ = VisitorTestMeta
+
+    def setUp(self):
+        self.maxDiff = 2000
+
+    def case(self, case):
+        parser = Parser()
+        result = parser.parse(case).to_ecma()
+        expected = textwrap.dedent(case).strip()
+        self.assertMultiLineEqual(result, expected)
+
+
+class MinifierTestCase(unittest.TestCase):
+    __metaclass__ = VisitorTestMeta
+
+    def assertMinified(self, source, expected):
+        minified = minify(source)
+        self.maxDiff = None
+        self.assertSequenceEqual(minified, expected)
+
+    def case(self, case):
+        input_, expected = case
+        self.assertMinified(input_, expected)
+
+    TEST_CASES = [
+        ("""
+        jQuery.fn = jQuery.prototype = {
+                // For internal use only.
+                _data: function( elem, name, data ) {
+                        return jQuery.data( elem, name, data, true );
+                }
+        };
+        """,
+         'jQuery.fn=jQuery.prototype={_data:function(elem,name,data){return jQuery.data(elem,name,data,true);}};'),
+
+        ('context = context instanceof jQuery ? context[0] : context;',
+         'context=context instanceof jQuery?context[0]:context;'
+         ),
+
+        ("""
+        /*
+        * A number of helper functions used for managing events.
+        * Many of the ideas behind this code originated from
+        * Dean Edwards' addEvent library.
+        */
+        if ( elem && elem.parentNode ) {
+                // Handle the case where IE and Opera return items
+                // by name instead of ID
+                if ( elem.id !== match[2] ) {
+                        return rootjQuery.find( selector );
+                }
+
+                // Otherwise, we inject the element directly into the jQuery object
+                this.length = 1;
+                this[0] = elem;
+        }
+        """,
+
+         'if(elem&&elem.parentNode){if(elem.id!==match[2])return rootjQuery.find(selector);this.length=1;this[0]=elem;}'
+         ),
+
+        ("""
+        var a = function( obj ) {
+                for ( var name in obj ) {
+                        return false;
+                }
+                return true;
+        };
+        """,
+         'var a=function(obj){for(var name in obj)return false;return true;};'
+         ),
+
+        ("""
+        x = "string", y = 5;
+
+        (x = 5) ? true : false;
+
+        for (p in obj)
+        ;
+
+        if (true)
+          val = null;
+        else
+          val = false;
+
+        """,
+         'x="string",y=5;(x=5)?true:false;for(p in obj);if(true)val=null;else val=false;'
+         ),
+
+        # for loops + empty statement in loop body
+        ("""
+        for (x = 0; true; x++)
+        ;
+        for (; true; x++)
+        ;
+        for (x = 0, y = 5; true; x++)
+        ;
+
+        y = (x + 5) * 20;
+
+        """,
+         'for(x=0;true;x++);for(;true;x++);for(x=0,y=5;true;x++);y=(x+5)*20;'),
+
+
+        # unary expressions
+        ("""
+        delete x;
+        typeof x;
+        void x;
+        x += (!y)++;
+        """,
+         'delete x;typeof x;void x;x+=(!y)++;'),
+
+        # label + break label + continue label
+        ("""
+        label:
+        if ( i == 0 )
+          continue label;
+        switch (day) {
+        case 5:
+          break ;
+        default:
+          break label;
+        }
+        """,
+         'label:if(i==0)continue label;switch(day){case 5:break;default:break label;}'),
+
+        # break + continue: no labels
+        ("""
+        while (i <= 7) {
+          if ( i == 3 )
+              continue;
+          if ( i == 0 )
+              break;
+        }
+        """,
+         'while(i<=7){if(i==3)continue;if(i==0)break;}'),
+
+        # regex + one line statements in if and if .. else
+        ("""
+        function a(x, y) {
+         var re = /ab+c/;
+         if (x == 1)
+           return x + y;
+         if (x == 3)
+           return {x: 1};
+         else
+           return;
+        }
+        """,
+         'function a(x,y){var re=/ab+c/;if(x==1)return x+y;if(x==3)return{x:1};else return;}'),
+
+        # new
+        ('return new jQuery.fn.init( selector, context, rootjQuery );',
+         'return new jQuery.fn.init(selector,context,rootjQuery);'
+         ),
+
+        # no space after 'else' when the next token is (, {
+        ("""
+        if (true) {
+          x = true;
+          y = 3;
+        } else {
+          x = false
+          y = 5
+        }
+        """,
+         'if(true){x=true;y=3;}else{x=false;y=5;}'),
+
+        ("""
+        if (true) {
+          x = true;
+          y = 3;
+        } else
+          (x + ' qw').split(' ');
+        """,
+         "if(true){x=true;y=3;}else(x+' qw').split(' ');"),
+
+
+        ##############################################################
+        # Block braces removal
+        ##############################################################
+
+        # do while
+        ('do { x += 1; } while(true);', 'do x+=1;while(true);'),
+        # do while: multiple statements
+        ('do { x += 1; y += 1;} while(true);', 'do{x+=1;y+=1;}while(true);'),
+
+        # elision
+        ('var a = [1, 2, 3, ,,,5];', 'var a=[1,2,3,,,,5];'),
+
+        # with
+        ("""
+        with (obj) {
+          a = b;
+        }
+        """,
+         'with(obj)a=b;'),
+
+        # with: multiple statements
+        ("""
+        with (obj) {
+          a = b;
+          c = d;
+        }
+        """,
+         'with(obj){a=b;c=d;}'),
+
+        # if else
+        ("""
+        if (true) {
+          x = true;
+        } else {
+          x = false
+        }
+        """,
+         'if(true)x=true;else x=false;'),
+
+        # if: multiple statements
+        ("""
+        if (true) {
+          x = true;
+          y = false;
+        } else {
+          x = false;
+          y = true;
+        }
+        """,
+         'if(true){x=true;y=false;}else{x=false;y=true;}'),
+
+        # try catch finally: one statement
+        ("""
+        try {
+          throw "my_exception"; // generates an exception
+        }
+        catch (e) {
+          // statements to handle any exceptions
+          log(e); // pass exception object to error handler
+        }
+        finally {
+          closefiles(); // always close the resource
+        }
+        """,
+         'try{throw "my_exception";}catch(e){log(e);}finally{closefiles();}'
+         ),
+
+        # try catch finally: no statements
+        ("""
+        try {
+        }
+        catch (e) {
+        }
+        finally {
+        }
+        """,
+         'try{}catch(e){}finally{}'
+         ),
+
+        # try catch finally: multiple statements
+        ("""
+        try {
+          x = 3;
+          y = 5;
+        }
+        catch (e) {
+          log(e);
+          log('e');
+        }
+        finally {
+          z = 7;
+          log('z');
+        }
+        """,
+         "try{x=3;y=5;}catch(e){log(e);log('e');}finally{z=7;log('z');}"
+         ),
+
+        # tricky case with an 'if' nested in 'if .. else'
+        # We need to preserve braces in the first 'if' otherwise
+        # 'else' might get associated with nested 'if' instead
+        ("""
+        if ( obj ) {
+                for ( n in obj ) {
+                        if ( v === false) {
+                                break;
+                        }
+                }
+        } else {
+                for ( ; i < l; ) {
+                        if ( nv === false ) {
+                                break;
+                        }
+                }
+        }
+        """,
+         'if(obj){for(n in obj)if(v===false)break;}else for(;i<l;)if(nv===false)break;'),
+
+        # We don't care about nested 'if' when enclosing 'if' block
+        # contains multiple statements because braces won't be removed
+        # by visit_Block when there are multiple statements in the block
+        ("""
+        if ( obj ) {
+                for ( n in obj ) {
+                        if ( v === false) {
+                                break;
+                        }
+                }
+                x = 5;
+        } else {
+                for ( ; i < l; ) {
+                        if ( nv === false ) {
+                                break;
+                        }
+                }
+        }
+        """,
+         'if(obj){for(n in obj)if(v===false)break;x=5;}else for(;i<l;)if(nv===false)break;'),
+
+
+        # No dangling 'else' - remove braces
+        ("""
+        if ( obj ) {
+                for ( n in obj ) {
+                        if ( v === false) {
+                                break;
+                        } else {
+                                n = 3;
+                        }
+                }
+        } else {
+                for ( ; i < l; ) {
+                        if ( nv === false ) {
+                                break;
+                        }
+                }
+        }
+        """,
+         'if(obj)for(n in obj)if(v===false)break;else n=3;else for(;i<l;)if(nv===false)break;'),
+
+        # foo["bar"] --> foo.bar
+        ('foo["bar"];', 'foo.bar;'),
+        ("foo['bar'];", 'foo.bar;'),
+        ("""foo['bar"']=42;""", """foo['bar"']=42;"""),
+        ("""foo["bar'"]=42;""", """foo["bar'"]=42;"""),
+        ('foo["bar bar"];', 'foo["bar bar"];'),
+        ('foo["bar"+"bar"];', 'foo["bar"+"bar"];'),
+        # https://github.com/rspivak/slimit/issues/34
+        # test some reserved keywords
+        ('foo["for"];', 'foo["for"];'),
+        ('foo["class"];', 'foo["class"];'),
+
+
+        # https://github.com/rspivak/slimit/issues/21
+        # c||(c=393,a=323,b=2321); --> c||c=393,a=323,b=2321; ERROR
+        ('c||(c=393);', 'c||(c=393);'),
+        ('c||(c=393,a=323,b=2321);', 'c||(c=393,a=323,b=2321);'),
+
+        # https://github.com/rspivak/slimit/issues/25
+        ('for(a?b:c;d;)e=1;', 'for(a?b:c;d;)e=1;'),
+
+        # https://github.com/rspivak/slimit/issues/26
+        ('"begin"+ ++a+"end";', '"begin"+ ++a+"end";'),
+
+        # https://github.com/rspivak/slimit/issues/28
+        ("""
+         (function($) {
+             $.hello = 'world';
+         }(jQuery));
+         """,
+         "(function($){$.hello='world';}(jQuery));"),
+
+        # function call in FOR init
+        ('for(o(); i < 3; i++) {}', 'for(o();i<3;i++){}'),
+
+        # unary increment operator in FOR init
+        ('for(i++; i < 3; i++) {}', 'for(i++;i<3;i++){}'),
+
+        # unary decrement operator in FOR init
+        ('for(i--; i < 3; i++) {}', 'for(i--;i<3;i++){}'),
+
+        # issue-37, simple identifier in FOR init
+        ('for(i; i < 3; i++) {}', 'for(i;i<3;i++){}'),
+
+        # https://github.com/rspivak/slimit/issues/32
+        ("""
+         Name.prototype = {
+           getPageProp: function Page_getPageProp(key) {
+             return this.pageDict.get(key);
+           },
+
+           get fullName() {
+             return this.first + " " + this.last;
+           },
+
+           set fullName(name) {
+             var names = name.split(" ");
+             this.first = names[0];
+             this.last = names[1];
+           }
+         };
+         """,
+         ('Name.prototype={getPageProp:function Page_getPageProp(key){'
+          'return this.pageDict.get(key);},'
+          'get fullName(){return this.first+" "+this.last;},'
+          'set fullName(name){var names=name.split(" ");this.first=names[0];'
+          'this.last=names[1];}};')
+        ),
+
+        # https://github.com/rspivak/slimit/issues/47 - might be a Python 3
+        # related issue
+        ('testObj[":"] = undefined; // Breaks', 'testObj[":"]=undefined;'),
+        ('testObj["::"] = undefined; // Breaks', 'testObj["::"]=undefined;'),
+        ('testObj["a:"] = undefined; // Breaks', 'testObj["a:"]=undefined;'),
+        ('testObj["."] = undefined; // OK', 'testObj["."]=undefined;'),
+        ('testObj["{"] = undefined; // OK', 'testObj["{"]=undefined;'),
+        ('testObj["}"] = undefined; // OK', 'testObj["}"]=undefined;'),
+        ('testObj["["] = undefined; // Breaks', 'testObj["["]=undefined;'),
+        ('testObj["]"] = undefined; // Breaks', 'testObj["]"]=undefined;'),
+        ('testObj["("] = undefined; // OK', 'testObj["("]=undefined;'),
+        ('testObj[")"] = undefined; // OK', 'testObj[")"]=undefined;'),
+        ('testObj["="] = undefined; // Breaks', 'testObj["="]=undefined;'),
+        ('testObj["-"] = undefined; // OK', 'testObj["-"]=undefined;'),
+        ('testObj["+"] = undefined; // OK', 'testObj["+"]=undefined;'),
+        ('testObj["*"] = undefined; // OK', 'testObj["*"]=undefined;'),
+        ('testObj["/"] = undefined; // OK', 'testObj["/"]=undefined;'),
+        (r'testObj["\\"] = undefined; // Breaks', r'testObj["\\"]=undefined;'),
+        ('testObj["%"] = undefined; // OK', 'testObj["%"]=undefined;'),
+        ('testObj["<"] = undefined; // Breaks', 'testObj["<"]=undefined;'),
+        ('testObj[">"] = undefined; // Breaks', 'testObj[">"]=undefined;'),
+        ('testObj["!"] = undefined; // OK', 'testObj["!"]=undefined;'),
+        ('testObj["?"] = undefined; // Breaks', 'testObj["?"]=undefined;'),
+        ('testObj[","] = undefined; // OK', 'testObj[","]=undefined;'),
+        ('testObj["@"] = undefined; // Breaks', 'testObj["@"]=undefined;'),
+        ('testObj["#"] = undefined; // OK', 'testObj["#"]=undefined;'),
+        ('testObj["&"] = undefined; // OK', 'testObj["&"]=undefined;'),
+        ('testObj["|"] = undefined; // OK', 'testObj["|"]=undefined;'),
+        ('testObj["~"] = undefined; // OK', 'testObj["~"]=undefined;'),
+        ('testObj["`"] = undefined; // Breaks', 'testObj["`"]=undefined;'),
+        ('testObj["."] = undefined; // OK', 'testObj["."]=undefined;'),
+        ]
+

From 692075170e23f47e59bef30b8958a1c4ac4e8349 Mon Sep 17 00:00:00 2001
From: Antoine Catton <devel@antoine.catton.fr>
Date: Sun, 25 Jan 2015 19:15:39 -0700
Subject: [PATCH 4/7] Add representation and equality between abstract syntax
 trees

---
 src/slimit/ast.py | 388 +++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 385 insertions(+), 3 deletions(-)

diff --git a/src/slimit/ast.py b/src/slimit/ast.py
index 7458967..fcedfb2 100644
--- a/src/slimit/ast.py
+++ b/src/slimit/ast.py
@@ -44,11 +44,28 @@ def to_ecma(self):
         visitor = ECMAVisitor()
         return visitor.visit(self)
 
+    def _eq(self, other):
+        if len(self.children()) != len(other.children()):
+            return False
+        else:
+            l = zip(self.children(), other.children())
+            return all(s == o for s, o in l)
+
+    def __eq__(self, other):
+        if type(self) == type(other):
+            return self._eq(other)
+        elif isinstance(other, Node):
+            return False
+        else:
+            return NotImplemented
+
 class Program(Node):
-    pass
+    def __repr__(self):
+        return 'Program(children={!r})'.format(self.children())
 
 class Block(Node):
-    pass
+    def __repr__(self):
+        return 'Block(children={!r})'.format(self.children())
 
 class Boolean(Node):
     def __init__(self, value):
@@ -57,13 +74,26 @@ def __init__(self, value):
     def children(self):
         return []
 
+    def _eq(self, other):
+        return self.value == other.value
+
+    def __repr__(self):
+        return 'Boolean({!r})'.format(self.value)
+
 class Null(Node):
     def __init__(self, value):
+        assert value == 'null'
         self.value = value
 
     def children(self):
         return []
 
+    def _eq(self, other):
+        return True  # A null value is always equal to another null value
+
+    def __repr__(self):
+        return 'Null()'
+
 class Number(Node):
     def __init__(self, value):
         self.value = value
@@ -71,6 +101,12 @@ def __init__(self, value):
     def children(self):
         return []
 
+    def _eq(self, other):
+        return self.value == other.value
+
+    def __repr__(self):
+        return 'Number(value={!r})'.format(self.value)
+
 class Identifier(Node):
     def __init__(self, value):
         self.value = value
@@ -78,6 +114,12 @@ def __init__(self, value):
     def children(self):
         return []
 
+    def _eq(self, other):
+        return self.value == other.value
+
+    def __repr__(self):
+        return 'Identifier(value={!r})'.format(self.value)
+
 class String(Node):
     def __init__(self, value):
         self.value = value
@@ -85,6 +127,12 @@ def __init__(self, value):
     def children(self):
         return []
 
+    def _eq(self, other):
+        return self.value == other.value
+
+    def __repr__(self):
+        return 'String(value={!r})'.format(self.value)
+
 class Regex(Node):
     def __init__(self, value):
         self.value = value
@@ -92,6 +140,12 @@ def __init__(self, value):
     def children(self):
         return []
 
+    def _eq(self, other):
+        return self.value == other.value
+
+    def __repr__(self):
+        return 'Regex(value={!r})'.format(self.value)
+
 class Array(Node):
     def __init__(self, items):
         self.items = items
@@ -99,6 +153,12 @@ def __init__(self, items):
     def children(self):
         return self.items
 
+    def __repr__(self):
+        return 'Array(items={!r})'.format(self.items)
+
+    def _eq(self, other):
+        return self.items == other.items
+
 class Object(Node):
     def __init__(self, properties=None):
         self.properties = [] if properties is None else properties
@@ -106,6 +166,12 @@ def __init__(self, properties=None):
     def children(self):
         return self.properties
 
+    def _eq(self, other):
+        return self.properties == other.properties
+
+    def __repr__(self):
+        return 'Object(properties={!r})'.format(self.properties)
+
 class NewExpr(Node):
     def __init__(self, identifier, args=None):
         self.identifier = identifier
@@ -114,6 +180,16 @@ def __init__(self, identifier, args=None):
     def children(self):
         return [self.identifier, self.args]
 
+    def _eq(self, other):
+        return (
+            (self.identifier == other.identifier) and
+            (self.args == other.args)
+        )
+
+    def __repr__(self):
+        return 'NewExpr(identifier={!r}, args={!r})'.format(
+            self.identifier, self.args)
+
 class FunctionCall(Node):
     def __init__(self, identifier, args=None):
         self.identifier = identifier
@@ -122,6 +198,16 @@ def __init__(self, identifier, args=None):
     def children(self):
         return [self.identifier] + self.args
 
+    def _eq(self, other):
+        return (
+            (self.identifier == other.identifier) and
+            (self.args == other.args)
+        )
+
+    def __repr__(self):
+        return 'FunctionCall(identifier={!r}, args={!r})'.format(
+            self.identifier, self.args)
+
 class BracketAccessor(Node):
     def __init__(self, node, expr):
         self.node = node
@@ -130,6 +216,16 @@ def __init__(self, node, expr):
     def children(self):
         return [self.node, self.expr]
 
+    def _eq(self, other):
+        return (
+            (self.node == other.node) and
+            (self.expr == other.expr)
+        )
+
+    def __repr__(self):
+        return 'BracketAccessor(node={!r}, expr={!r})'.format(
+            self.node, self.expr)
+
 class DotAccessor(Node):
     def __init__(self, node, identifier):
         self.node = node
@@ -138,6 +234,16 @@ def __init__(self, node, identifier):
     def children(self):
         return [self.node, self.identifier]
 
+    def _eq(self, other):
+        return (
+            (self.node == other.node) and
+            (self.identifier == other.identifier)
+        )
+
+    def __repr__(self):
+        return 'DotAccessor(node={!r}, identifier={!r})'.format(
+            self.node, self.identifier)
+
 class Assign(Node):
     def __init__(self, op, left, right):
         self.op = op
@@ -147,6 +253,17 @@ def __init__(self, op, left, right):
     def children(self):
         return [self.left, self.right]
 
+    def _eq(self, other):
+        return (
+            (self.op == other.op) and
+            (self.left == other.left) and
+            (self.right == other.right)
+        )
+
+    def __repr__(self):
+        return 'Assign(op={!r}, left={!r}, right={!r})'.format(
+            self.op, self.left, self.right)
+
 class GetPropAssign(Node):
     def __init__(self, prop_name, elements):
         """elements - function body"""
@@ -156,6 +273,16 @@ def __init__(self, prop_name, elements):
     def children(self):
         return [self.prop_name] + self.elements
 
+    def _eq(self, other):
+        return (
+            (self.prop_name == other.prop_name) and
+            (self.elements == other.elements)
+        )
+
+    def __repr__(self):
+        return 'GetPropAssign(prop_name={!r}, elements={!r})'.format(
+            self.prop_name, self.elements)
+
 class SetPropAssign(Node):
     def __init__(self, prop_name, parameters, elements):
         """elements - function body"""
@@ -166,8 +293,20 @@ def __init__(self, prop_name, parameters, elements):
     def children(self):
         return [self.prop_name] + self.parameters + self.elements
 
+    def _eq(self, other):
+        return (
+            (self.prop_name == other.prop_name) and
+            (self.parameters == other.parameters) and
+            (self.elements == other.elements)
+        )
+
+    def __repr__(self):
+        fmt = 'SetPropAssign(prop_name={!r}, parameters={!r}, elements={!r}'
+        return fmt.format(self.prop_name, self.parameters, self.elements)
+
 class VarStatement(Node):
-    pass
+    def __repr__(self):
+        return 'VarStatement(children={!r})'.format(self.children())
 
 class VarDecl(Node):
     def __init__(self, identifier, initializer=None):
@@ -178,6 +317,16 @@ def __init__(self, identifier, initializer=None):
     def children(self):
         return [self.identifier, self.initializer]
 
+    def _eq(self, other):
+        return (
+            (self.identifier == other.identifier) and
+            (self.initializer == other.initializer)
+        )
+
+    def __repr__(self):
+        return 'VarDecl(identifier={!r}, initializer={!r})'.format(
+            self.identifier, self.initializer)
+
 class UnaryOp(Node):
     def __init__(self, op, value, postfix=False):
         self.op = op
@@ -187,6 +336,17 @@ def __init__(self, op, value, postfix=False):
     def children(self):
         return [self.value]
 
+    def _eq(self, other):
+        return (
+            (self.op == other.op) and
+            (self.value == other.value) and
+            (self.postfix == other.postfix)
+        )
+
+    def __repr__(self):
+        return 'UnaryOp(op={!r}, value={!r}, postfix={!r})'.format(
+            self.op, self.value, self.postfix)
+
 class BinOp(Node):
     def __init__(self, op, left, right):
         self.op = op
@@ -196,6 +356,17 @@ def __init__(self, op, left, right):
     def children(self):
         return [self.left, self.right]
 
+    def _eq(self, other):
+        return (
+            (self.op == other.op) and
+            (self.left == other.left) and
+            (self.right == other.right)
+        )
+
+    def __repr__(self):
+        return 'BinOp(op={!r}, left={!r}, right={!r})'.format(
+            self.op, self.left, self.right)
+
 class Conditional(Node):
     """Conditional Operator ( ? : )"""
     def __init__(self, predicate, consequent, alternative):
@@ -206,6 +377,17 @@ def __init__(self, predicate, consequent, alternative):
     def children(self):
         return [self.predicate, self.consequent, self.alternative]
 
+    def _eq(self, other):
+        return (
+            (self.predicate == other.predicate) and
+            (self.consequent == other.consequent) and
+            (self.alternative == other.alternative)
+        )
+
+    def __repr__(self):
+        fmt = 'Conditional(predicate={!r}, consequent={!r}, alternative={!r})'
+        return fmt.format(self.predicate, self.consequent, self.alternative)
+
 class If(Node):
     def __init__(self, predicate, consequent, alternative=None):
         self.predicate = predicate
@@ -215,6 +397,17 @@ def __init__(self, predicate, consequent, alternative=None):
     def children(self):
         return [self.predicate, self.consequent, self.alternative]
 
+    def _eq(self, other):
+        return (
+            (self.predicate == other.predicate) and
+            (self.consequent == other.consequent) and
+            (self.alternative == other.alternative)
+        )
+
+    def __repr__(self):
+        return 'If(predicate={!r}, consequent={!r}, alternative={!r})'.format(
+            self.predicate, self.consequent, self.alternative)
+
 class DoWhile(Node):
     def __init__(self, predicate, statement):
         self.predicate = predicate
@@ -223,6 +416,16 @@ def __init__(self, predicate, statement):
     def children(self):
         return [self.predicate, self.statement]
 
+    def _eq(self, other):
+        return (
+            (self.predicate == other.predicate) and
+            (self.statement == other.statement)
+        )
+
+    def __repr__(self):
+        return 'DoWhile(predicate={!r}, statement={!r})'.format(
+            self.predicate, self.statement)
+
 class While(Node):
     def __init__(self, predicate, statement):
         self.predicate = predicate
@@ -231,6 +434,16 @@ def __init__(self, predicate, statement):
     def children(self):
         return [self.predicate, self.statement]
 
+    def _eq(self, other):
+        return (
+            (self.predicate == other.predicate) and
+            (self.statement == other.statement)
+        )
+
+    def __repr__(self):
+        return 'While(predicate={!r}, statement={!r})'.format(
+            self.predicate, self.statement)
+
 class For(Node):
     def __init__(self, init, cond, count, statement):
         self.init = init
@@ -241,6 +454,18 @@ def __init__(self, init, cond, count, statement):
     def children(self):
         return [self.init, self.cond, self.count, self.statement]
 
+    def _eq(self, other):
+        return (
+            (self.init == other.init) and
+            (self.cond == other.cond) and
+            (self.count == other.count) and
+            (self.statement == other.statement)
+        )
+
+    def __repr__(self):
+        return 'For(init={!r}, cond={!r}, count={!r}, statement={!r})'.format(
+            self.init, self.cond, self.count, self.statement)
+
 class ForIn(Node):
     def __init__(self, item, iterable, statement):
         self.item = item
@@ -250,6 +475,17 @@ def __init__(self, item, iterable, statement):
     def children(self):
         return [self.item, self.iterable, self.statement]
 
+    def _eq(self, other):
+        return (
+            (self.item == other.item) and
+            (self.iterable == other.iterable) and
+            (self.statement == other.statement)
+        )
+
+    def __repr__(self):
+        return 'ForIn(item={!r}, iterable={!r}, statement={!r})'.format(
+            self.item, self.iterable, self.statement)
+
 class Continue(Node):
     def __init__(self, identifier=None):
         self.identifier = identifier
@@ -257,6 +493,12 @@ def __init__(self, identifier=None):
     def children(self):
         return [self.identifier]
 
+    def _eq(self, other):
+        return True  # A continue statement is always the same as another one
+
+    def __repr__(self):
+        return 'Continue()'
+
 class Break(Node):
     def __init__(self, identifier=None):
         self.identifier = identifier
@@ -264,6 +506,12 @@ def __init__(self, identifier=None):
     def children(self):
         return [self.identifier]
 
+    def _eq(self, other):
+        return True  # A break statement is always the same as another one
+
+    def __repr__(self):
+        return 'Break()'
+
 class Return(Node):
     def __init__(self, expr=None):
         self.expr = expr
@@ -271,6 +519,12 @@ def __init__(self, expr=None):
     def children(self):
         return [self.expr]
 
+    def _eq(self, other):
+        return self.expr == other.expr
+
+    def __repr__(self):
+        return 'Return(expr={!r})'.format(self.expr)
+
 class With(Node):
     def __init__(self, expr, statement):
         self.expr = expr
@@ -279,6 +533,12 @@ def __init__(self, expr, statement):
     def children(self):
         return [self.expr, self.statement]
 
+    def _eq(self, other):
+        return self.expr == other.expr
+
+    def __repr__(self):
+        return 'With(expr={!r})'.format(self.expr)
+
 class Switch(Node):
     def __init__(self, expr, cases, default=None):
         self.expr = expr
@@ -288,6 +548,17 @@ def __init__(self, expr, cases, default=None):
     def children(self):
         return [self.expr] + self.cases + [self.default]
 
+    def _eq(self, other):
+        return (
+            (self.expr == other.expr) and
+            (self.cases == other.cases) and
+            (self.default == other.default)
+        )
+
+    def __repr__(self):
+        return 'Switch(expr={!r}, cases={!r}, default={!r})'.format(
+            self.expr, self.cases, self.default)
+
 class Case(Node):
     def __init__(self, expr, elements):
         self.expr = expr
@@ -296,6 +567,16 @@ def __init__(self, expr, elements):
     def children(self):
         return [self.expr] + self.elements
 
+    def _eq(self, other):
+        return (
+            (self.expr == other.expr) and
+            (self.elements == other.elements)
+        )
+
+    def __repr__(self):
+        return 'Case(expr={!r}, elements={!r})'.format(
+            self.expr, self.elements)
+
 class Default(Node):
     def __init__(self, elements):
         self.elements = elements if elements is not None else []
@@ -303,6 +584,12 @@ def __init__(self, elements):
     def children(self):
         return self.elements
 
+    def _eq(self, other):
+        return self.elements == other.elements
+
+    def __repr__(self):
+        return 'Default(elements={!r})'.format(self.elements)
+
 class Label(Node):
     def __init__(self, identifier, statement):
         self.identifier = identifier
@@ -311,6 +598,16 @@ def __init__(self, identifier, statement):
     def children(self):
         return [self.identifier, self.statement]
 
+    def _eq(self, other):
+        return (
+            (self.identifier == other.identifier) and
+            (self.statement == other.statement)
+        )
+
+    def __repr__(self):
+        return 'Label(identifier={!r}, statement={!r})'.format(
+            self.identifier, self.statement)
+
 class Throw(Node):
     def __init__(self, expr):
         self.expr = expr
@@ -318,6 +615,12 @@ def __init__(self, expr):
     def children(self):
         return [self.expr]
 
+    def _eq(self, other):
+        return self.expr == other.expr
+
+    def __repr__(self):
+        return 'Throw(expr={!r})'.format(self.expr)
+
 class Try(Node):
     def __init__(self, statements, catch=None, fin=None):
         self.statements = statements
@@ -327,6 +630,17 @@ def __init__(self, statements, catch=None, fin=None):
     def children(self):
         return [self.statements] + [self.catch, self.fin]
 
+    def _eq(self, other):
+        return (
+            (self.statements == other.statements) and
+            (self.catch == other.catch) and
+            (self.fin == other.fin)
+        )
+
+    def __repr__(self):
+        return 'Try(statement={!r}, catch={!r}, fin={!r})'.format(
+            self.statement, self.catch, self.fin)
+
 class Catch(Node):
     def __init__(self, identifier, elements):
         self.identifier = identifier
@@ -337,6 +651,16 @@ def __init__(self, identifier, elements):
     def children(self):
         return [self.identifier, self.elements]
 
+    def _eq(self, other):
+        return (
+            (self.identifier == other.identifier) and
+            (self.elements == other.elements)
+        )
+
+    def __repr__(self):
+        return 'Catch(identifier={!r}, elements={!r})'.format(
+            self.identifier, self.elements)
+
 class Finally(Node):
     def __init__(self, elements):
         self.elements = elements
@@ -344,6 +668,12 @@ def __init__(self, elements):
     def children(self):
         return self.elements
 
+    def _eq(self, other):
+        return self.elements == other.elements
+
+    def __repr__(self):
+        return 'Finally(elements={!r})'.format(self.elements)
+
 class Debugger(Node):
     def __init__(self, value):
         self.value = value
@@ -351,6 +681,12 @@ def __init__(self, value):
     def children(self):
         return []
 
+    def _eq(self, other):
+        return True  # Two debugger statements are equal
+
+    def __repr__(self):
+        return 'Debugger()'
+
 
 class FuncBase(Node):
     def __init__(self, identifier, parameters, elements):
@@ -370,6 +706,19 @@ def _init_ids(self):
     def children(self):
         return [self.identifier] + self.parameters + self.elements
 
+    def _eq(self, other):
+        return (
+            (self.identifier == other.identifier) and
+            (self.parameters == other.parameters) and
+            (self.elements == other.elements)
+        )
+
+    def __repr__(self):
+        # Could be FuncDecl, FuncExpr
+        name = type(self).__name__
+        fmt = name + '(identifier={!r}, parameters={!r}, elements={!r})'
+        return fmt.format(self.identifier, self.parameters, self.elements)
+
 class FuncDecl(FuncBase):
     pass
 
@@ -386,6 +735,15 @@ def __init__(self, left, right):
     def children(self):
         return [self.left, self.right]
 
+    def _eq(self, other):
+        return (
+            (self.left == other.left) and
+            (self.right == other.right)
+        )
+
+    def __repr__(self):
+        return 'Comma(left={!r}, right={!r})'.format(self.left, self.right)
+
 class EmptyStatement(Node):
     def __init__(self, value):
         self.value = value
@@ -393,6 +751,12 @@ def __init__(self, value):
     def children(self):
         return []
 
+    def _eq(self, other):
+        return True  # Two empty statements are equal
+
+    def __repr__(self):
+        return 'EmptyStatement()'
+
 class ExprStatement(Node):
     def __init__(self, expr):
         self.expr = expr
@@ -400,6 +764,12 @@ def __init__(self, expr):
     def children(self):
         return [self.expr]
 
+    def _eq(self, other):
+        return self.expr == other.expr
+
+    def __repr__(self):
+        return 'ExprStatement(expr={!r})'.format(self.expr)
+
 class Elision(Node):
     def __init__(self, value):
         self.value = value
@@ -407,9 +777,21 @@ def __init__(self, value):
     def children(self):
         return []
 
+    def _eq(self, other):
+        return True  # Two elisions are equal
+
+    def __repr__(self):
+        return 'Elision()'
+
 class This(Node):
     def __init__(self):
         pass
 
     def children(self):
         return []
+
+    def _eq(self, other):
+        return True  # Two this objects are always equal
+
+    def __repr__(self):
+        return 'This()'

From a11bbc7a404b2f6a7ca49de1f2f332b930a67d69 Mon Sep 17 00:00:00 2001
From: Antoine Catton <devel@antoine.catton.fr>
Date: Sun, 25 Jan 2015 19:26:53 -0700
Subject: [PATCH 5/7] Bugfix: isolate the closure

---
 src/slimit/tests/test_visitor.py | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/src/slimit/tests/test_visitor.py b/src/slimit/tests/test_visitor.py
index 7e797ec..cd5ef8c 100644
--- a/src/slimit/tests/test_visitor.py
+++ b/src/slimit/tests/test_visitor.py
@@ -42,9 +42,14 @@ def __new__(cls, name, bases, attributes):
                           for b in bases
                           if hasattr(b, 'TEST_CASES')][0]
 
+        def generate_test_func(name, case):
+            func = lambda self: self.case(case)
+            func.__name__ = name
+            return func
+
         for idx, case in enumerate(test_cases):
             name = 'test_case_{}'.format(idx)
-            attributes[name] = lambda self: self.case(case)
+            attributes[name] = generate_test_func(name, case)
 
         return super(VisitorTestMeta, cls).__new__(cls, name, bases, attributes)
 

From ebc9fdad536c556d047a09eddacb8460cc2f912a Mon Sep 17 00:00:00 2001
From: Antoine Catton <devel@antoine.catton.fr>
Date: Sun, 25 Jan 2015 19:41:31 -0700
Subject: [PATCH 6/7] Make sure parsing is stable

---
 src/slimit/tests/test_visitor.py | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/src/slimit/tests/test_visitor.py b/src/slimit/tests/test_visitor.py
index cd5ef8c..4d4be11 100644
--- a/src/slimit/tests/test_visitor.py
+++ b/src/slimit/tests/test_visitor.py
@@ -517,6 +517,19 @@ def case(self, case):
         self.assertMultiLineEqual(result, expected)
 
 
+class ParsingTestCase(VisitorTestMixin, unittest.TestCase):
+    __metaclass__ = VisitorTestMeta
+
+    def case(self, case):
+        parser_a = Parser()
+        result_a = parser_a.parse(case)
+
+        parser_b = Parser()
+        result_b = parser_b.parse(case)
+
+        self.assertEqual(result_a, result_b)
+
+
 class MinifierTestCase(unittest.TestCase):
     __metaclass__ = VisitorTestMeta
 

From d93f027c2660b95357cf82d41fad2dac960f7526 Mon Sep 17 00:00:00 2001
From: Antoine Catton <devel@antoine.catton.fr>
Date: Sun, 25 Jan 2015 20:01:55 -0700
Subject: [PATCH 7/7] Fix unary and binary operators merging

---
 src/slimit/tests/test_visitor.py  | 30 ++++++++++++++++++++++++++++++
 src/slimit/visitors/minvisitor.py | 10 +++++-----
 2 files changed, 35 insertions(+), 5 deletions(-)

diff --git a/src/slimit/tests/test_visitor.py b/src/slimit/tests/test_visitor.py
index 4d4be11..67dc265 100644
--- a/src/slimit/tests/test_visitor.py
+++ b/src/slimit/tests/test_visitor.py
@@ -958,3 +958,33 @@ def case(self, case):
         ('testObj["."] = undefined; // OK', 'testObj["."]=undefined;'),
         ]
 
+
+class MinifierReparsingTestCase(unittest.TestCase):
+    __metaclass__ = VisitorTestMeta
+
+    TEST_CASES = [
+        """
+        a + +a;
+        """,
+
+        """
+        a - -a;
+        """,
+
+        """
+        a - +a;
+        """,
+
+        """
+        a + ++a;
+        """,
+
+        """
+        a - --a;
+        """
+    ]
+
+    def case(self, case):
+        parsed = Parser().parse(case)
+        minified = Parser().parse(minify(case))
+        self.assertEqual(parsed, minified)
diff --git a/src/slimit/visitors/minvisitor.py b/src/slimit/visitors/minvisitor.py
index 1c6fd15..9cf986d 100644
--- a/src/slimit/visitors/minvisitor.py
+++ b/src/slimit/visitors/minvisitor.py
@@ -188,12 +188,12 @@ def visit_ForIn(self, node):
     def visit_BinOp(self, node):
         if node.op in ('instanceof', 'in'):
             template = '%s %s %s'
-        elif (node.op == '+' and
-              isinstance(node.right, ast.UnaryOp) and
-              node.right.op == '++' and not node.right.postfix
+        elif isinstance(node.right, ast.UnaryOp) and not node.right.postfix \
+             and (
+                (node.op == '+' and node.right.op in ('++', '+')) or
+                (node.op == '-' and node.right.op in ('--', '-'))
               ):
-            # make a space between + and ++
-            # https://github.com/rspivak/slimit/issues/26
+            # Don't merge + +, + ++, - - and - --
             template = '%s%s %s'
         else:
             template = '%s%s%s'
